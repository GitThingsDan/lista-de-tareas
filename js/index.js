// INSPIRADO EN https://www.w3schools.com/howto/howto_js_todolist.asp

/* ------------CLASES:------------ */

class Tiempo {
	constructor() {
		this.ms = Date.now()
		this.dateTime = new Date(this.ms)
		this.localDateTime = this.dateTime.toLocaleString()
	}
}
class Tarea {
	/** Aqu√≠ hay un PROBLEMA: al recuperar las 'Tarea's cada vez que el sitio web se recarga, el contador parte desde 0 de nuevo, cosa que no deber√≠a ser.*/
	static contador = 0
	constructor(descripcion) {
		this.tiempoDeCreacion = new Tiempo().localDateTime
		/** La propiedad "contador" confiere especificidad adicional al momento de individualizar cada tarea (y tambi√©n evita que al borrar una tarea se borren sus duplicados con ella). */
		this.contador = ++Tarea.contador
		this.descripcion = descripcion
		/** Se me complica habilitar la edici√≥n de las tareas y que se actualicen sus descripciones pero no sus "id"s en Storage (por otro lado, si las seteo en Storage de todos modos, se crear√° una tarea nueva cada vez que se edite su descripci√≥n, cuando la idea es que se sobreescriba... ü§¶üèª‚Äç‚ôÇÔ∏è). Por esto, simplifiqu√© el "id" sacando la propiedad "descripcion"...¬°ojal√° que funcione! */
		this.id = `${this.tiempoDeCreacion} - ${this.contador}`
		// this.id = `${this.tiempoDeCreacion} - ${this.contador} - ${this.descripcion}`
		this.completacion = false
	}
}

/* -----------FUNCIONES:----------- */

const crearCheckbox = objetoTarea => {
	const checkbox = document.createElement("input")
	checkbox.setAttribute("type", "checkbox")
	/** Esto permitir√° persistir el estado de "tick" del checkbox a trav√©s de cualquier recarga del sitio web: */
	checkbox.checked = objetoTarea.completacion
	/** El atributo "id" permite que la etiqueta pueda identificar y reconocer a su checkbox. */
	checkbox.id = objetoTarea.id
	/** Cada vez que se alterne el estado de "tick" del checkbox, actualizar la propiedad "completacion" del objetoTarea respectivo (y tambi√©n en Storage). */
	checkbox.addEventListener("change", () => {
		objetoTarea.completacion = checkbox.checked
		localStorage.setItem(objetoTarea.id, JSON.stringify(objetoTarea))
	})
	return checkbox
}
const crearEtiqueta = (objetoTarea, checkbox) => {
	const etiqueta = document.createElement("label")
	/** El atributo "for" permite que la etiqueta se aplique a su checkbox respectivo (es decir, aquel cuyo "id" coincida con el "for" de la etiqueta). */
	etiqueta.setAttribute("for", checkbox.id)
	/** "El atributo "contenteditable" permite que el texto del elemento sea editable..." - Capit√°n Obvio, 2024 */
	etiqueta.setAttribute("contenteditable", true)
	etiqueta.innerText = objetoTarea.descripcion
	/** Cada vez que se edite la descripci√≥n de la tarea, actualizar la propiedad "descripcion" del objetoTarea respectivo (y tambi√©n en Storage). */
	etiqueta.addEventListener("input", () => {
		objetoTarea.descripcion = etiqueta.innerText
		localStorage.setItem(objetoTarea.id, JSON.stringify(objetoTarea))
	})
	return etiqueta
}
/** @param {any[]} arrayDeTareas - Hubiera sido ideal no haber a√±adido el par√°metro "arrayDeTareas" que a√±ad√≠ para mayor dinamismo al aplicar "filter"...por culpa de esto, tuve que tambi√©n a√±adir el par√°metro a todas las funciones que dependen de esta... ü§¶üèª‚Äç‚ôÇÔ∏è */
const crearDeleteBtn = (arrayDeTareas, objetoTarea) => {
	const deleteBtn = document.createElement("button")
	/** La "X" es una forma r√°pida de simbolizar la funci√≥n de "eliminar tarea" que este bot√≥n representa. */
	deleteBtn.innerText = "X"
	deleteBtn.addEventListener("click", () => {
		/** Eliminar tarea del array de tareas en index.js: */
		arrayDeTareas = arrayDeTareas.filter(el => el.id !== objetoTarea.id)
		/** Eliminar tarea del documento HTML: */
		deleteBtn.parentNode.remove()
		/** Eliminar tarea del Storage: */
		localStorage.removeItem(objetoTarea.id)
	})
	return deleteBtn
}
/** @param {any[]} arrayDeTareas - Hubiera sido ideal no haber a√±adido el par√°metro "arrayDeTareas" que a√±ad√≠ para mayor dinamismo al aplicar "filter" en la funci√≥n {@link crearDeleteBtn | crearDeleteBtn}...por culpa de esto, tuve que tambi√©n a√±adir el par√°metro a todas las funciones que dependen de esta... ü§¶üèª‚Äç‚ôÇÔ∏è */
function crearTareaHTML(arrayDeTareas, objetoTarea) {
	const checkbox = crearCheckbox(objetoTarea)
	const etiqueta = crearEtiqueta(objetoTarea, checkbox)
	const deleteBtn = crearDeleteBtn(arrayDeTareas, objetoTarea)

	const tareaHTML = document.createElement("li")
	tareaHTML.append(checkbox, etiqueta, deleteBtn)
	return tareaHTML
}

function agregarNuevaTarea(evento, entrada, arrayDeTareas, listaHTML) {
	/** ¬øPOR QU√â? 
	 * evento.key: Necesito comprobar que la tecla pulsada en el evento "keydown" dentro del "input[type='text']" sea la tecla Enter.

	 * evento.type: Si s√≥lo dejo la condici√≥n "evento.key", no podr√° funcionar√° el evento "click" del "button" que agrega tareas, porque no pasar√° la condici√≥n mencionada. Por eso, me veo obligado a poner esta segunda condici√≥n (alternativa).
	*/
	if (evento.key === "Enter" || evento.type === "click") {
		/** Objeto instanciado para a√±adirse al arrayDeTareas (y, eventualmente, al Storage). */
		const objetoTarea = new Tarea(entrada.value)
		arrayDeTareas.push(objetoTarea)
		/** Se asigna un valor de string vac√≠o ("") al campo de entrada, para "reiniciarlo" y permitir que el usuario ingrese una nueva tarea desde 0. */
		entrada.value = ""

		/** Elemento "li" creado din√°micamente, que ser√° anexado al pie de listaHTML (elemento "ul" ya presente en el documento). */
		const tareaHTML = crearTareaHTML(arrayDeTareas, objetoTarea)
		listaHTML.appendChild(tareaHTML)

		/** A√±adir (por primera vez) objetoTarea al Storage: */
		localStorage.setItem(objetoTarea.id, JSON.stringify(objetoTarea))
	}
}

function recuperarTareasDesdeStorage() {
	let arrayDeTareas = []
	for (let i = 0; i < localStorage.length; i++) {
		const claveJSONTarea = localStorage.key(i)
		const JSONtarea = localStorage.getItem(claveJSONTarea)
		const objetoTareaStorage = JSON.parse(JSONtarea)
		arrayDeTareas.push(objetoTareaStorage)
	}
	return arrayDeTareas
}
function ordenarYAnexarTareasRecuperadasAHTML(arrayDeTareas, listaHTML) {
	/** La funci√≥n pasada como argumento a "*.sort(*)" debe ser acorde con el tipo de valor que intentamos ordenar (en este caso - objetoTarea.id - , NO una resta, sino que una COMPARACI√ìN - dado que el "id" comienza con un "contador" num√©rico, el que ser√° sometido a esta comparaci√≥n -). */
	arrayDeTareas.sort((a, b) => {
		if (a.id < b.id) {
			return -1
		} else {
			return 1
		}
	})
	/** Forma avanzada, abreviada y menos compleja de hacerlo (operador condicional - ternario -):
	 * arrayDeTareas.sort((a, b) => a.id < b.id ? -1 : 1) 
	*/
	arrayDeTareas.forEach(
		/** @param {any[]} arr - Hubiera sido ideal no haber a√±adido el par√°metro "arrayDeTareas" que a√±ad√≠ para mayor dinamismo al aplicar "filter" en la funci√≥n {@link crearDeleteBtn | crearDeleteBtn}...por culpa de esto, tuve que tambi√©n a√±adir el par√°metro a todas las funciones que dependen de esta... ü§¶üèª‚Äç‚ôÇÔ∏è */
		(el, idx, arr) => listaHTML.appendChild(crearTareaHTML(arr, el))
	)
}

/* ----------INVOCACIONES:---------- */

let arrayDeTareas = recuperarTareasDesdeStorage()
const listaHTML = document.getElementsByTagName("ul")[0]
ordenarYAnexarTareasRecuperadasAHTML(arrayDeTareas, listaHTML)

const entrada = document.querySelector("input[type='text']")
entrada.addEventListener("keydown", evento => agregarNuevaTarea(evento, entrada, arrayDeTareas, listaHTML))

const boton = document.querySelector("button#addTaskBtn")
boton.addEventListener("click", evento => agregarNuevaTarea(evento, entrada, arrayDeTareas, listaHTML))